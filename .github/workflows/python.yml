name: Python CI

on:
  push:
    paths:
      - crates/algo_models_ffi/**
      - creates/algo_models/**
    branches:
      - main
      - master
    tags:
      - '*'
  pull_request:
    paths:
      - crates/algo_models_ffi/**
      - creates/algo_models/**
  workflow_dispatch:

permissions:
  contents: read

env:
  CRATE_PATH: crates/algo_models_ffi

jobs:
  build_and_test:
    defaults:
      run:
        shell: bash
    runs-on: ${{ matrix.target.runner }}
    strategy:
      matrix: 
        target:
          # name: The name of the target passed to cargo build
          # runner: The GitHub runner to use
          - name: x86_64-pc-windows-msvc
            runner: windows-latest
          - name: x86_64-apple-darwin
            runner: macos-13
          - name: aarch64-apple-darwin
            runner: macos-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          cache: 'pip' # caching pip dependencies
      - run: pip install maturin[zig]
      - name: Install python dependencies
        run: pip install -r ${{ env.CRATE_PATH }}/tests/py/requirements.txt
      - name: maturin build
        run: |
          cd ${{ env.CRATE_PATH }} 
          maturin build --release --target ${{ matrix.target.name }} ${{ runner.os == 'Linux' && '--zig --compatibility manylinux_2_27' || '' }}
      - name: pytest
        run: |
          set -e
          pip install target/wheels/*.whl
          cd ${{ env.CRATE_PATH }}
          pytest
  linux_build_and_test:
    defaults:
      run:
        shell: bash
    runs-on: ubuntu-22.04${{ startswith(matrix.target.name, 'aarch64') && '-arm' || '' }}
    strategy:
      matrix:
        target:
          - name: aarch64-unknown-linux-musl
          - name: aarch64-unknown-linux-gnu
          - name: x86_64-unknown-linux-gnu

    env:
      distro: ${{ contains(matrix.target.name, 'musl') && 'alpine_latest' || 'ubuntu_latest' }}
      arch: ${{ (startswith(matrix.target.name, 'aarch64') && 'aarch64') || (startswith(matrix.target.name, 'x86_64') && 'x86_64') }}
      manylinux: ${{ contains(matrix.target.name, 'musl') && 'musllinux_1_2' || 'manylinux_2_28' }}
    
    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Start Container
        env:
          container: quay.io/pypa/${{ env.manylinux }}_${{ env.arch }}
        run: | 
          set -e
          docker pull ${{ env.container }}
          docker run --name build-container \
          -d \
          -v ${{ github.workspace }}:/workspace \
          -e CARGO_HOME="/usr/local" \
          ${{ env.container }}  \
          tail -f /dev/null

      - name: Install Rustup
        env:
          SCRIPT: curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --profile minimal
        run: docker exec build-container bash -c "$SCRIPT"

      - name: rustup target add
        env:
          SCRIPT: rustup target add ${{ matrix.target.name }}
        run: docker exec build-container bash -c "$SCRIPT"

      - name: Install maturin
        env:
          SCRIPT: python3.10 -m pip install maturin[patchelf]
        run: docker exec build-container bash -c "$SCRIPT"

      - name: maturin build
        env:
          SCRIPT: |
            cd /workspace/${{ env.CRATE_PATH }}
            python3.10 -m maturin build --release --target ${{ matrix.target.name }} --compatibility ${{ env.manylinux }}
        run: docker exec build-container bash -c "$SCRIPT"

      - name: Pytest (in build container)
        if: env.distro != 'ubuntu_latest' || (env.arch != 'x86_64' && env.arch != 'aarch64')
        env:
          SCRIPT: |
            python3.10 -m pip install target/wheels/*.whl
            cd ${{ env.CRATE_PATH }}
            python3.10 -m pip install --break-system-packages -r tests/py/requirements.txt
            python3.10 -m pytest
        run: docker exec build-container bash -c "$SCRIPT"
 
      - uses: actions/setup-python@v5
        if: env.distro == 'ubuntu_latest' && (env.arch == 'x86_64' || env.arch == 'aarch64')
        with:
          python-version: '3.13'
          cache: 'pip' # caching pip dependencies

      - name: Install python dependencies
        if: env.distro == 'ubuntu_latest' && (env.arch == 'x86_64' || env.arch == 'aarch64')
        run: pip install -r ${{ env.CRATE_PATH }}/tests/py/requirements.txt

      - name: Pytest
        if: env.distro == 'ubuntu_latest' && (env.arch == 'x86_64' || env.arch == 'aarch64')
        run: |
          set -e
          pip install target/wheels/*.whl
          cd ${{ env.CRATE_PATH }}
          pytest

      # - name: Pytest (Ubuntu non-x86_64 or aarch64)
      #   if: matrix.target.distro != 'alpine_latest'
      #   uses: uraimo/run-on-arch-action@v2
      #   with:
      #     arch: ${{ env.arch }}
      #     distro: ${{ env.distro }}
      #     env: |
      #       MISE_DATA_DIR: /mise
      #       MISE_CONFIG_DIR: /mise
      #       MISE_CACHE_DIR: /mise/cache
      #       MISE_INSTALL_PATH: /usr/local/bin/mise
      #     # Install some dependencies in the container. This speeds up builds if
      #     # you are also using githubToken. Any dependencies installed here will
      #     # be part of the container image that gets cached, so subsequent
      #     # builds don't have to re-install them. The image layer is cached
      #     # publicly in your project's package repository, so it is vital that
      #     # no secrets are present in the container state or logs.
      #     install: |
      #       apt-get -y update && apt-get -y install curl
      #       export MISE_DATA_DIR="/mise"
      #       export MISE_CONFIG_DIR="/mise"
      #       export MISE_CACHE_DIR="/mise/cache"
      #       export MISE_INSTALL_PATH="/usr/local/bin/mise"
      #       export MISE_VERSION="v2025.1.14"
      #       curl https://mise.run | sh
      #       mise settings set python.compile false && mise use -g python
      #     run: |
      #       mise x -- pip install target/wheels/*.whl
      #       cd ${{ env.CRATE_PATH }}
      #       mise x -- pip install -r tests/py/requirements.txt
      #       mise x -- pytest
      #
