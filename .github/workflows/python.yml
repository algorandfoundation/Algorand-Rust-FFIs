name: Python CI

on:
  push:
    paths:
      - crates/algo_models_ffi/**
      - creates/algo_models/**
    branches:
      - main
      - master
    tags:
      - '*'
  pull_request:
    paths:
      - crates/algo_models_ffi/**
      - creates/algo_models/**
  workflow_dispatch:

permissions:
  contents: read

env:
  CRATE_PATH: crates/algo_models_ffi

jobs:
  build:
    defaults:
      run:
        shell: bash
    runs-on: ${{ matrix.target.runner }}
    strategy:
      matrix:
        target:
          - name: aarch64-unknown-linux-musl
            runner: ubuntu-22.04
            arch: aarch64
            distro: alpine_latest
            container: ghcr.io/cross-rs/aarch64-unknown-linux-musl:0.2.5

    steps:
      - uses: actions/checkout@v4

      - name: Start Container
        run: | 
          set -e
          docker pull ${{ matrix.target.container }}
          docker run --name build-container \
          -d \
          -v ${{ github.workspace }}:/workspace \
          -e MISE_DATA_DIR="/mise" \
          -e MISE_CONFIG_DIR="/mise" \
          -e MISE_CACHE_DIR="/mise/cache" \
          -e MISE_INSTALL_PATH="/usr/local/bin/mise" \
          -e CARGO_HOME="/usr/local" \
          ${{ matrix.target.container }} \
          tail -f /dev/null

      # "Install Rustup" through "Install maturin" can be done at image build time
      # We'd just need to create our own image based on the respective matrix.target.container
      # Or create an action similar to run-on-arch that caches install steps
      - name: Install Rustup
        env:
          SCRIPT: curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --profile minimal
        run: docker exec build-container bash -c "$SCRIPT"

      - name: rustup target add
        env:
          SCRIPT: rustup target add ${{ matrix.target.name }}
        run: docker exec build-container bash -c "$SCRIPT"

      - name: Install mise
        env: 
          SCRIPT: curl https://mise.run | sh
        run: docker exec build-container bash -c "$SCRIPT"

      - name: Install python (mise)
        env:
          SCRIPT: mise settings set python.compile false && mise use -g python
        run: docker exec build-container bash -c "$SCRIPT"

      - name: Install maturin
        env:
          SCRIPT: mise x -- pip install maturin[patchelf]
        run: docker exec build-container bash -c "$SCRIPT"

      - name: maturin build
        env:
          SCRIPT: cd /workspace/${{ env.CRATE_PATH }} && mise x -- maturin build --release --target ${{ matrix.target.name }}
        run: docker exec build-container bash -c "$SCRIPT"

      - name: Pytest
        uses: uraimo/run-on-arch-action@v2
        with:
          arch: ${{ matrix.target.arch }}
          distro: ${{ matrix.target.distro }}
          env: |
            MISE_DATA_DIR: /mise
            MISE_CONFIG_DIR: /mise
            MISE_CACHE_DIR: /mise/cache
            MISE_INSTALL_PATH: /usr/local/bin/mise
          
          # Install some dependencies in the container. This speeds up builds if
          # you are also using githubToken. Any dependencies installed here will
          # be part of the container image that gets cached, so subsequent
          # builds don't have to re-install them. The image layer is cached
          # publicly in your project's package repository, so it is vital that
          # no secrets are present in the container state or logs.
          #
          # TODO: Only run apk add bash if distro is alpine_latest
          install: |
            apk add --no-cache bash
            mkdir -p /mise/cache/python/pyenv
            export MISE_DATA_DIR="/mise"
            export MISE_CONFIG_DIR="/mise"
            export MISE_CACHE_DIR="/mise/cache"
            export MISE_INSTALL_PATH="/usr/local/bin/mise"
            export MISE_VERSION="v2025.1.14"
            wget --output-document - https://mise.run | sh
            mise -vv use -g python

          run: |
            mise x -- pip install target/*.whl
            cd ${{ env.CRATE_PATH }}
            mise x -- pip install -r tests/py/requirements.txt
            mise x -- pytest


