name: Python CI

on:
  push:
    paths:
      - crates/algo_models_ffi/**
      - creates/algo_models/**
    branches:
      - main
      - master
    tags:
      - '*'
  pull_request:
    paths:
      - crates/algo_models_ffi/**
      - creates/algo_models/**
  workflow_dispatch:

permissions:
  contents: read

env:
  CRATE_PATH: crates/algo_models_ffi

jobs:
  build_and_test:
    defaults:
      run:
        shell: bash
    runs-on: ${{ matrix.target.runner }}
    strategy:
      matrix: 
        target:
          # name: The name of the target passed to cargo build
          # runner: The GitHub runner to use
          - name: x86_64-pc-windows-msvc
            runner: windows-latest
          - name: x86_64-apple-darwin
            runner: macos-13
          - name: aarch64-apple-darwin
            runner: macos-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          cache: 'pip' # caching pip dependencies
      - run: pip install maturin[zig]
      - name: Install python dependencies
        run: pip install -r ${{ env.CRATE_PATH }}/tests/py/requirements.txt
      - name: maturin build
        run: |
          cd ${{ env.CRATE_PATH }} 
          maturin build --release --target ${{ matrix.target.name }} ${{ runner.os == 'Linux' && '--zig --compatibility manylinux_2_27' || '' }}
      - name: pytest
        run: |
          set -e
          pip install target/wheels/*.whl
          cd ${{ env.CRATE_PATH }}
          pytest

  linux_build_and_test:
    defaults:
      run:
        shell: bash
    runs-on: ubuntu-22.04${{ matrix.arch == 'aarch64' && '-arm' || '' }}
    strategy:
      matrix:
        arch: [aarch64, x86_64]
        vendor_os: [unknown-linux-musl, unknown-linux-gnu]

    env:
      manylinux: ${{ contains(matrix.vendor_os, 'musl') && 'musllinux_1_2' || 'manylinux_2_28' }}
      target: ${{ matrix.arch }}-${{ matrix.vendor_os }}
  
    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Start Container
        env:
          container: quay.io/pypa/${{ env.manylinux }}_${{ matrix.arch }}
        run: | 
          set -e
          docker pull ${{ env.container }}
          docker run --name build-container \
          -d \
          -v ${{ github.workspace }}:/workspace \
          -e CARGO_HOME="/usr/local" \
          ${{ env.container }}  \
          tail -f /dev/null

      - name: Install Rustup
        env:
          SCRIPT: curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --profile minimal
        run: docker exec build-container bash -c "$SCRIPT"

      - name: rustup target add
        env:
          SCRIPT: rustup target add ${{ env.target }}
        run: docker exec build-container bash -c "$SCRIPT"

      - name: Install maturin
        env:
          SCRIPT: python3.10 -m pip install maturin[patchelf]
        run: docker exec build-container bash -c "$SCRIPT"

      - name: maturin build
        env:
          SCRIPT: |
            cd /workspace/${{ env.CRATE_PATH }}
            python3.10 -m maturin build --release --target ${{ env.target }} --compatibility ${{ env.manylinux }}
        run: docker exec build-container bash -c "$SCRIPT"

      - name: Pytest
        env:
          SCRIPT: |
            cd /workspace
            python3.10 -m pip install target/wheels/*.whl
            cd ${{ env.CRATE_PATH }}
            python3.10 -m pip install -r tests/py/requirements.txt
            python3.10 -m pytest
        run: docker exec build-container bash -c "$SCRIPT"
